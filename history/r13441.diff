Index: collective.solr/trunk/collective/solr/schema.xml
===================================================================
--- collective.solr/trunk/collective/solr/schema.xml	(revision 0)
+++ collective.solr/trunk/collective/solr/schema.xml	(revision 13441)
@@ -0,0 +1,111 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schema name="example" version="1.1">
+  <types>
+    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
+    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
+    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
+    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>
+    <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>
+    <fieldType name="random" class="solr.RandomSortField" indexed="true"/>
+    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
+      <analyzer>
+        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
+      </analyzer>
+    </fieldType>
+    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
+      <analyzer type="index">
+        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
+        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
+        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
+        <filter class="solr.LowerCaseFilterFactory"/>
+        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
+        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
+      </analyzer>
+      <analyzer type="query">
+        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
+        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
+        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
+        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
+        <filter class="solr.LowerCaseFilterFactory"/>
+        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
+        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
+      </analyzer>
+    </fieldType>
+    <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100">
+      <analyzer>
+        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
+        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
+        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
+        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+        <filter class="solr.LowerCaseFilterFactory"/>
+        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
+        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
+      </analyzer>
+    </fieldType>
+    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
+      <analyzer>
+        <tokenizer class="solr.KeywordTokenizerFactory"/>
+        <filter class="solr.LowerCaseFilterFactory"/>
+        <filter class="solr.TrimFilterFactory"/>
+        <filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replacement="" replace="all"/>
+      </analyzer>
+    </fieldType>
+    <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField"/> 
+ </types>
+ <fields>
+   <field name="id" type="string" indexed="true" stored="true" required="true"/> 
+   <field name="sku" type="textTight" indexed="true" stored="true" omitNorms="true"/>
+   <field name="name" type="text" indexed="true" stored="true"/>
+   <field name="nameSort" type="string" indexed="true" stored="false"/>
+   <field name="alphaNameSort" type="alphaOnlySort" indexed="true" stored="false"/>
+   <field name="manu" type="text" indexed="true" stored="true" omitNorms="true"/>
+   <field name="cat" type="text_ws" indexed="true" stored="true" multiValued="true" omitNorms="true" termVectors="true"/>
+   <field name="features" type="text" indexed="true" stored="true" multiValued="true"/>
+   <field name="includes" type="text" indexed="true" stored="true"/>
+   <field name="weight" type="sfloat" indexed="true" stored="true"/>
+   <field name="price" type="sfloat" indexed="true" stored="true"/>
+   <field name="popularity" type="sint" indexed="true" stored="true" default="0"/>
+   <field name="inStock" type="boolean" indexed="true" stored="true"/>
+   <field name="word" type="string" indexed="true" stored="true"/>
+   <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
+   <field name="manu_exact" type="string" indexed="true" stored="false"/>
+   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
+
+   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
+        will be used if the name matches any of the patterns.
+        RESTRICTION: the glob-like pattern in the name attribute must have
+        a "*" only at the start or the end.
+        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
+        Longer patterns will be matched first.  if equal size patterns
+        both match, the first appearing in the schema will be used.  -->
+   <dynamicField name="*_i" type="sint" indexed="true" stored="true"/>
+   <dynamicField name="*_s" type="string" indexed="true" stored="true"/>
+   <dynamicField name="*_l" type="slong" indexed="true" stored="true"/>
+   <dynamicField name="*_t" type="text" indexed="true" stored="true"/>
+   <dynamicField name="*_b" type="boolean" indexed="true" stored="true"/>
+   <dynamicField name="*_f" type="sfloat" indexed="true" stored="true"/>
+   <dynamicField name="*_d" type="sdouble" indexed="true" stored="true"/>
+   <dynamicField name="*_dt" type="date" indexed="true" stored="true"/>
+
+   <dynamicField name="random*" type="random"/>
+ </fields>
+ <uniqueKey>id</uniqueKey>
+ <defaultSearchField>text</defaultSearchField>
+ <solrQueryParser defaultOperator="OR"/>
+   <copyField source="id" dest="sku"/>
+   <copyField source="incubationdate_dt" dest="incubationdate_s"/>
+   <copyField source="cat" dest="text"/>
+   <copyField source="name" dest="text"/>
+   <copyField source="name" dest="nameSort"/>
+   <copyField source="name" dest="alphaNameSort"/>
+   <copyField source="manu" dest="text"/>
+   <copyField source="features" dest="text"/>
+   <copyField source="includes" dest="text"/>
+   <copyField source="manu" dest="manu_exact"/>
+</schema>
\ No newline at end of file
Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 13440)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13441)
@@ -159,4 +159,49 @@
         handler = handlers.get((action,elem.tag), None)
         if handler is not None:
             handler(elem, stack)
-    return stack[0]
\ No newline at end of file
+    return stack[0]
+
+
+
+# Parse config
+
+# handle dynamic fields?
+# uniqueKey
+# solrQueryParser
+#  copyField - should remove dest from fields and add source if not already present - set source to same type as dest
+
+def parseConfig(data):
+    """Parse schema.xml"""
+    if isinstance(data, basestring):
+        data = StringIO(data)
+    fieldtypes = {}
+    fields = {}
+    dynamicfields = {}
+    filterfields = {}
+    elements = iterparse(data, events=('end',))
+    for action, elem in elements:
+        if elem.tag == 'fieldType':
+            fieldtypes[elem.get('name')] = elem.get('class')
+        elif elem.tag == 'field':
+            fields[elem.get('name')] = elem.get('type')
+        elif elem.tag == 'dynamicField':
+            name = elem.get('name')
+            name.replace('*','')
+            dynamicfields[name] = elem.get('type')
+        elif elem.tag == 'copyField':
+            source = elem.get('source')
+            dest = elem.get('dest')
+            if not fields.has_key('source'):
+                if fields.has_key(dest):
+                    fields[source] = fields[dest]
+                    filterfields[dest] = None
+                else:
+                    df = dynamicfields.get('*_%s'%dest.split('_')[-1], None)
+                    if df is not None:
+                        fields[source] = df
+    # Massage list, remove filterfields, assign fieldtypes to fields
+    res = {}
+    for k,v in fields.items():
+        #if not filterfields.has_key(k):
+        res[k] = fieldtypes.get(v,v)
+    return res
Index: collective.solr/trunk/collective/solr/tests.py
===================================================================
--- collective.solr/trunk/collective/solr/tests.py	(revision 13440)
+++ collective.solr/trunk/collective/solr/tests.py	(revision 13441)
@@ -1,13 +1,17 @@
 # -*- coding: utf-8 -*-
 
+from os.path import dirname, join
+
 from unittest import TestCase, TestSuite, makeSuite, main
 from StringIO import StringIO
 from DateTime import DateTime
 from httplib import HTTPConnection
 
+import collective.solr.tests
 from collective.solr.solr import SolrConnection
 from collective.solr.parser import SolrResponse
 from collective.solr.parser import parse2
+from collective.solr.parser import parseConfig
 
 
 ADD_REQUEST = """POST /solr/update HTTP/1.1\r
@@ -424,6 +428,12 @@
         self.assertEqual(headers['params']['rows'], '10')
         self.assertEqual(headers['params']['q'], 'id:[* TO *]')
 
+    def testParseConfig(self):
+        filename = join(dirname(collective.solr.tests.__file__), 'schema.xml')
+        schema = open(filename, 'r').read()
+        res = parseConfig(schema)
+        self.failUnlessEqual(len(res), 18) # 18 fields defined in schema.xml
+
 
 def test_suite():
     return TestSuite((
