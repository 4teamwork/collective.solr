Index: collective.solr/trunk/collective/solr/tests/test_parser2.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_parser2.py	(revision 13455)
+++ collective.solr/trunk/collective/solr/tests/test_parser2.py	(revision 13456)
@@ -1,87 +0,0 @@
-from unittest import TestCase, TestSuite, makeSuite, main
-from DateTime import DateTime
-
-from collective.solr.parser import parse2
-from collective.solr.tests.utils import getData
-
-
-class ParserTests(TestCase):
-
-    def testParseSimpleSearchResults(self):
-        search_response = getData('search_response.txt')
-        response = parse2(search_response.split('\n\n', 1)[1])
-        results = response.getResults()
-        match = results[0]
-        self.assertEqual(len(results), 1)
-        self.assertEqual(match.id, '500')
-        self.assertEqual(match.name, 'python test doc')
-        self.assertEqual(match.popularity, 0)
-        self.assertEqual(match.sku, '500')
-        self.assertEqual(match.timestamp, DateTime('2008-02-29 16:11:46.998 GMT'))
-        headers = response.getHeaders()
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 0)
-        self.assertEqual(headers['params']['wt'], 'xml')
-        self.assertEqual(headers['params']['indent'], 'on')
-        self.assertEqual(headers['params']['rows'], '10')
-        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
-
-    def testParseComplexSearchResults(self):
-        complex_xml_response = getData('complex_xml_response.txt')
-        response = parse2(complex_xml_response)
-        self.failUnless(response)
-        results = response.getResults()
-        self.assertEqual(len(results), 2)
-        first = results[0]
-        self.assertEqual(first.cat, ['software', 'search'])
-        self.assertEqual(len(first.features), 7)
-        self.assertEqual([type(x).__name__ for x in first.features], ['str'] * 6 + ['unicode'])
-        self.assertEqual(first.id, 'SOLR1000')
-        self.assertEqual(first.inStock, True)
-        self.assertEqual(first.incubationdate_dt, DateTime('2006/01/17 GMT'))
-        self.assertEqual(first.manu, 'Apache Software Foundation')
-        self.assertEqual(first.popularity, 10)
-        self.assertEqual(first.price, 0.0)
-        headers = response.getHeaders()
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 0)
-        self.assertEqual(headers['params']['indent'], 'on')
-        self.assertEqual(headers['params']['rows'], '10')
-        self.assertEqual(headers['params']['start'], '0')
-        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
-        self.assertEqual(headers['params']['version'], '2.2')
-
-    def testParseFacetSearchResults(self):
-        facet_xml_response = getData('facet_xml_response.txt')
-        response = parse2(facet_xml_response)
-        self.failUnless(response)
-        results = response.getResults()
-        self.assertEqual(len(results), 0)
-        headers = response.getHeaders()
-        self.assertEqual(type(headers), type({}))
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 1)
-        self.assertEqual(headers['params']['facet.limit'], '-1')
-        self.assertEqual(headers['params']['rows'], '0')
-        self.assertEqual(headers['params']['facet'], 'true')
-        self.assertEqual(headers['params']['facet.field'], ['cat', 'inStock'])
-        self.assertEqual(headers['params']['indent'], '10')
-        self.assertEqual(headers['params']['q'], 'solr')
-        counts = response['facet_counts']
-        self.assertEqual(type(counts), type({}))
-        self.assertEqual(counts['facet_queries'], {})
-        self.assertEqual(counts['facet_fields']['cat']['electronics'], 0)
-        self.assertEqual(counts['facet_fields']['cat']['monitor'], 0)
-        self.assertEqual(counts['facet_fields']['cat']['search'], 1)
-        self.assertEqual(counts['facet_fields']['cat']['software'], 1)
-        self.assertEqual(counts['facet_fields']['inStock']['true'], 1)
-
-
-def test_suite():
-    return TestSuite((
-        makeSuite(ParserTests),
-    ))
-
-if __name__ == '__main__':
-    main(defaultTest='test_suite')
-
Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 13455)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13456)
@@ -74,104 +74,6 @@
         return self
 
 
-# XXXXXXXXXXXXXXXXX Alternative 2 XXXXXXXXXXXXXXXXXX
-
-class Response(dict):
-    def getHeaders(self):
-        return self.get('responseHeader',{})
-
-    def getResults(self):
-        return self.get('response',[])
-
-class Result(list):
-    def __init__(self, name, numFound, start, maxScore):
-        self.name = name
-        self.numFound = int(numFound)
-        self.start = int(start)
-
-_marker = []
-class Flare(dict):
-    # Look up attributes in dict
-    def __getattr__(self, name):
-        res = self.get(name, _marker)
-        if res is not _marker:
-            return res
-        else:
-            raise AttributeError, name
-
-def add_node(value, elem, stack):
-    if elem.get('name', None) is not None:
-        stack[-1][elem.get('name')] = value
-    else:
-        stack[-1].append(value)
-
-def pop_stack(elem, stack):
-    stack.pop()
-
-def handle_start_response(elem, stack):
-    response = Response() # Create new Response obj
-    stack.append(response)
-
-def handle_start_lst(elem, stack):
-    lst = {}
-    add_node(lst, elem, stack)
-    stack.append(lst)
-
-def handle_start_result(elem, stack):
-    result = Result(elem.get('name',None), elem.get('numFound',None), elem.get('start',None), elem.get('maxScore',None))
-    add_node(result, elem, stack)
-    stack.append(result)
-
-def handle_start_arr(elem, stack):
-    arr = []
-    add_node(arr, elem, stack)
-    stack.append(arr)
-
-def handle_start_doc(elem, stack):
-    doc = Flare()
-    add_node(doc, elem, stack)
-    stack.append(doc)
-
-def handle_literal(func):
-    def handle(elem, stack):
-        value = func(elem.text)
-        add_node(value, elem, stack)
-    return handle
-
-handlers = {
-    ('start','response'): handle_start_response, # No end handler to leave it in stack
-    ('start','lst'):      handle_start_lst,
-    ('end'  ,'lst'):      pop_stack,
-    ('start','arr'):      handle_start_arr,
-    ('end'  ,'arr'):      pop_stack,
-    ('start','result'):   handle_start_result,
-    ('end'  ,'result'):   pop_stack,
-    ('start','doc'):      handle_start_doc,
-    ('end'  ,'doc'):      pop_stack,
-    ('end'  ,'null'):     handle_literal(lambda x: None),
-    ('end'  ,'int'):      handle_literal(int),
-    ('end'  ,'float'):    handle_literal(float),
-    ('end'  ,'double'):   handle_literal(float),
-    ('end'  ,'long'):     handle_literal(long),
-    ('end'  ,'bool'):     handle_literal(lambda x: x == 'true'),
-    ('end'  ,'str'):      handle_literal(lambda x: x or ''),
-    ('end'  ,'date'):     handle_literal(DateTime),
-}
-
-def parse2(data):
-    """ parse a solr response contained in a string or file-like object """
-    if isinstance(data, basestring):
-        data = StringIO(data)
-    stack = []
-    elements = iterparse(data, events=('start', 'end'))
-    for action, elem in elements:
-        handler = handlers.get((action,elem.tag), None)
-        if handler is not None:
-            handler(elem, stack)
-    return stack[0]
-
-
-
 # Parse config
 
 # handle dynamic fields?
