Index: collective.solr/trunk/collective/solr/tests/test_indexablewrapper.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_indexablewrapper.py	(revision 13489)
+++ collective.solr/trunk/collective/solr/tests/test_indexablewrapper.py	(revision 13490)
@@ -9,6 +9,10 @@
 
 import collective.solr
 from collective.solr.indexablewrapper import ISolrIndexableObjectWrapper
+from collective.solr.indexer import SolrIndexQueueProcessor
+from collective.solr.solr import SolrConnection
+from collective.solr.tests.test_solr import fakehttp
+from collective.solr.tests.utils import getData
 
 
 @onsetup
@@ -49,6 +53,21 @@
         self.failUnlessEqual(wr.allowedRolesAndUsers(),
                             ['user$test_user_1_', 'user$portal_owner', 'Contributor', 'Manager', 'Editor', 'Reader'])
 
+    def testIndexObject(self):
+        proc = SolrIndexQueueProcessor()
+        proc.setHost()
+        conn = proc.getConnection()
+        fakehttp(conn, getData('schema.xml'), [])   # fake schema response
+        proc.getSchema()                            # read and cache the schema
+        output = []
+        response = getData('add_response.txt')
+        fakehttp(conn, response, output)            # fake add response
+        self.folder.id = '500'                      # fake the needed values
+        self.folder.name = 'python test doc'
+        proc.index(self.folder)                     # indexing sends data
+        output = ''.join(output).replace('\r', '')
+        self.assertEqual(output, getData('add_request.txt'))
+
 
 def test_suite():
     return TestSuite([
Index: collective.solr/trunk/collective/solr/indexer.py
===================================================================
--- collective.solr/trunk/collective/solr/indexer.py	(revision 13489)
+++ collective.solr/trunk/collective/solr/indexer.py	(revision 13490)
@@ -30,18 +30,17 @@
     def index(self, obj, attributes=None):
         portal = getToolByName(obj, 'portal_url').getPortalObject()
         wrapper = getMultiAdapter((obj,portal), ISolrIndexableObjectWrapper)
-        conn = SolrConnection(host='localhost:8983', persistent=True)
-        data = {}
-        schema = conn.getSchema()
-        for key, class_ in schema.fields.items():
-            value = getattr(wrapper, key, None)
+        data, marker = {}, []
+        for name, field in self.getSchema().items():
+            value = getattr(wrapper, name, marker)
+            if value is marker:
+                continue
             if callable(value):
                 value = value()
-            if handlers.has_key(class_):
-                value = handlers[class_](value)
-            data[key] = value
-        conn.add(**data)
-        r = conn.commit()
+            if handlers.has_key(field.class_):
+                value = handlers[field.class_](value)
+            data[name] = value
+        self.getConnection().add(**data)
 
     def reindex(self, obj, attributes=None):
         pass
@@ -53,7 +52,7 @@
         pass
 
     def commit(self):
-        pass
+        self.getConnection().commit()
 
     # helper methods
 
@@ -71,9 +70,14 @@
         """ returns an existing connection (and schema) or opens one """
         if self.connection is None:
             host = '%s:%d' % (self.host, self.port)
-            self.connection = SolrConnection(host=host, base=self.base, persistent=True)
+            self.connection = SolrConnection(host=host, solrBase=self.base, persistent=True)
             self.schema = None
+        return self.connection
+
+    def getSchema(self):
+        """ returns the currently used schema of fetches it;
+            TODO: move schema handling (multi-value etc) into `SolrConnection` """
         if self.schema is None:
-            self.schema = self.connection.getSchema()
-        return self.connection, self.schema
+            self.schema = self.getConnection().getSchema()
+        return self.schema
 
