Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 13437)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13438)
@@ -3,6 +3,10 @@
 from DateTime import DateTime
 
 
+class SolrFlare(object):
+    """ a sol(a)r brain; TODO: this should get an interface!! """
+
+
 # unmarshallers for basic types
 unmarshallers = {
     'int': int,
@@ -12,6 +16,14 @@
     'date': DateTime,
 }
 
+# nesting tags along with their factories
+nested = {
+    'arr': list,
+    'lst': dict,
+    'result': list,
+    'doc': SolrFlare,
+}
+
 def setter(item, name, value):
     """ sets the named value on item respecting its type """
     if isinstance(item, list):
@@ -22,21 +34,9 @@
         setattr(item, name, value)
 
 
-class SolrFlare(object):
-    """ a sol(a)r brain; TODO: this should get an interface!! """
-
-
 class SolrResponse(object):
     """ a solr search response; TODO: this should get an interface!! """
 
-    # nesting tags along with their factories
-    nested = {
-        'arr': list,
-        'lst': dict,
-        'result': list,
-        'doc': SolrFlare,
-    }
-
     def __init__(self, data=None):
         if data is not None:
             self.parse(data)
@@ -45,19 +45,18 @@
         """ parse a solr response contained in a string or file-like object """
         if isinstance(data, basestring):
             data = StringIO(data)
-        nested = self.nested.has_key
         stack = [self]
         elements = iterparse(data, events=('start', 'end'))
         for action, elem in elements:
             tag = elem.tag
             if action == 'start':
-                if nested(tag):
-                    stack.append(self.nested[tag]())
+                if nested.has_key(tag):
+                    stack.append(nested[tag]())
                 elif unmarshallers.has_key(tag):
                     data = unmarshallers[tag](elem.text)
                     setter(stack[-1], elem.get('name'), data)
             elif action == 'end':
-                if nested(tag):
+                if nested.has_key(tag):
                     data = stack.pop()
                     setter(stack[-1], elem.get('name'), data)
         return self
