Index: collective.solr/trunk/collective/solr/tests/test_integration.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_integration.py	(revision 13495)
+++ collective.solr/trunk/collective/solr/tests/test_integration.py	(revision 13496)
@@ -1,35 +1,21 @@
-from unittest import TestSuite, makeSuite, main
+# integration and functional tests
+# see http://plone.org/documentation/tutorial/testing/writing-a-plonetestcase-unit-integration-test
+# for more information about the following setup
 
+from unittest import TestSuite, makeSuite, main
 from Products.Five import zcml
 from Products.Five import fiveconfigure
 from Products.PloneTestCase import PloneTestCase as ptc
 from Products.PloneTestCase.layer import onsetup
 
-import collective.solr
-
 
 @onsetup
 def setup_product():
-    """Set up additional products and ZCML required to test this product.
-    
-    The @onsetup decorator causes the execution of this body to be deferred
-    until the setup of the Plone site testing layer.
-    """
-    # Load the ZCML configuration for this package and its dependencies
     fiveconfigure.debug_mode = True
-    zcml.load_config('configure.zcml',
-                     collective.solr)
+    import collective.solr
+    zcml.load_config('configure.zcml', collective.solr)
     fiveconfigure.debug_mode = False
 
-    # We need to tell the testing framework that these products
-    # should be available. This can't happen until after we have loaded
-    # the ZCML.
-    #ptc.installPackage('collective.solr')
-    fiveconfigure.debug_mode = False
-
-
-# The order here is important: We first call the deferred function and then 
-# let PloneTestCase install it during Plone site setup
 setup_product()
 ptc.setupPloneSite()
 
@@ -40,8 +26,9 @@
 
 def test_suite():
     return TestSuite([
-        # makeSuite(QueueIndexerTests),
+        makeSuite(TestCase),
     ])
 
 if __name__ == '__main__':
     main(defaultTest='test_suite')
+
