Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 13426)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13427)
@@ -13,37 +13,53 @@
 
 
 class Flare(object):
-    """ a sol(a)r brain """
+    """ a sol(a)r brain; TODO: this should get an interface!! """
 
 
-def parseResults(data):
-    """ parser for results returned from solr """
+class SolrResponse(object):
+    """ a solr search response; TODO: this should get an interface!! """
 
-    results = None
-    flare = None
-    array = None
-
-    for action, elem in iterparse(StringIO(data), events=('start', 'end')):
-        if action == 'start':
-            if elem.tag == 'result':    # start result set, set up list...
-                results = []
-            elif elem.tag == 'doc':     # start of result, create brain...
-                flare = Flare()
-                results.append(flare)
-            elif flare is not None:
-                if elem.tag == 'arr':   # start of array, set it up...
-                    array = []
-                    setattr(flare, elem.get('name'), array)
-                else:
-                    unmarshal = unmarshallers.get(elem.tag)
-                    if unmarshal is not None:   # known type?
-                        data = unmarshal(elem)
-                        if array is not None:   # array element
-                            array.append(data)
-                        else:                   # regular attribute
-                            setattr(flare, elem.get('name'), data)
-        elif action == 'end':
-            if elem.tag == 'arr':   # end of array, "close" it
-                array = None
-    return results
+    def __init__(self, data=None):
+        if data is not None:
+            self.parse(data)
+
+    def parse(self, data):
+        """ parse a solr response contained in a string or file-like object """
+        if isinstance(data, basestring):
+            data = StringIO(data)
+        elements = iterparse(data, events=('start', 'end'))
+        for action, elem in elements:
+            if action == 'start':
+                if elem.tag == 'result':
+                    results = self.parseResults(elem, elements)
+                    setattr(self, elem.get('name'), results)
+
+    def parseResults(self, elem, elements):
+        """ sub-parser for solr search reponses """
+        results = []
+        flare = None
+        array = None
+        for action, elem in elements:
+            if action == 'start':
+                if elem.tag == 'doc':   # start of result, create brain...
+                    flare = Flare()
+                    results.append(flare)
+                elif flare is not None:
+                    if elem.tag == 'arr':   # start of array, set it up...
+                        array = []
+                        setattr(flare, elem.get('name'), array)
+                    else:
+                        unmarshal = unmarshallers.get(elem.tag)
+                        if unmarshal is not None:   # known type?
+                            data = unmarshal(elem)
+                            if array is not None:   # array element
+                                array.append(data)
+                            else:                   # regular attribute
+                                setattr(flare, elem.get('name'), data)
+            elif action == 'end':
+                if elem.tag == 'arr':   # end of array, "close" it
+                    array = None
+                elif elem.tag == 'result':  # end of results, return!
+                    break
+        return results
 
Index: collective.solr/trunk/collective/solr/tests.py
===================================================================
--- collective.solr/trunk/collective/solr/tests.py	(revision 13426)
+++ collective.solr/trunk/collective/solr/tests.py	(revision 13427)
@@ -6,7 +6,7 @@
 from httplib import HTTPConnection
 
 from collective.solr.solr import SolrConnection
-from collective.solr.parser import parseResults
+from collective.solr.parser import SolrResponse
 
 
 ADD_REQUEST = """POST /solr/update HTTP/1.1\r
@@ -294,7 +294,8 @@
 class ParserTests(TestCase):
 
     def testParseSimpleSearchResults(self):
-        results = parseResults(SEARCH_RESPONSE.split('\n\n', 1)[1])
+        response = SolrResponse(SEARCH_RESPONSE.split('\n\n', 1)[1])
+        results = response.response     # the result set is named 'response'
         match = results[0]
         self.assertEqual(len(results), 1)
         self.assertEqual(match.id, '500')
@@ -304,7 +305,8 @@
         self.assertEqual(match.timestamp, DateTime('2008-02-29 16:11:46.998 GMT'))
 
     def testParseComplexSearchResults(self):
-        results = parseResults(COMPLEX_XML_RESPONSE)
+        response = SolrResponse(COMPLEX_XML_RESPONSE)
+        results = response.response     # the result set is named 'response'
         self.assertEqual(len(results), 2)
         first = results[0]
         self.assertEqual(first.cat, ['software', 'search'])
@@ -318,7 +320,9 @@
         self.assertEqual(first.price, 0.0)
 
     def testParseFacetSearchResults(self):
-        results = parseResults(FACET_XML_RESPONSE)
+        response = SolrResponse(FACET_XML_RESPONSE)
+        results = response.response     # the result set is named 'response'
+        self.assertEqual(len(results), 0)
 
 
 def test_suite():
