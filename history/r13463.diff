Index: collective.solr/trunk/collective/solr/tests/test_parser.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_parser.py	(revision 13462)
+++ collective.solr/trunk/collective/solr/tests/test_parser.py	(revision 13463)
@@ -82,10 +82,9 @@
         self.assertEqual(counts['facet_fields']['inStock']['true'], 1)
 
     def testParseConfig(self):
-        schema = getData('schema.xml')
-        schema = SolrSchema(schema)
-        res = schema.fields
-        self.failUnlessEqual(len(res), 18) # 18 fields defined in schema.xml
+        schema = SolrSchema(getData('schema.xml'))
+        fields = schema.fields
+        self.failUnlessEqual(len(fields), 17) # 17 fields defined in schema.xml
 
 
 def test_suite():
Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 13462)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13463)
@@ -94,36 +94,17 @@
             search and indexing queries later on """
         if isinstance(data, basestring):
             data = StringIO(data)
-
         fieldtypes = {}
         fields = {}
-        dynamicfields = {}
-        filterfields = {}
         elements = iterparse(data, events=('end',))
         for action, elem in elements:
             if elem.tag == 'fieldType':
                 fieldtypes[elem.get('name')] = elem.get('class')
             elif elem.tag == 'field':
                 fields[elem.get('name')] = elem.get('type')
-            elif elem.tag == 'dynamicField':
-                name = elem.get('name')
-                name.replace('*','')
-                dynamicfields[name] = elem.get('type')
-            elif elem.tag == 'copyField':
-                source = elem.get('source')
-                dest = elem.get('dest')
-                if not fields.has_key('source'):
-                    if fields.has_key(dest):
-                        fields[source] = fields[dest]
-                        filterfields[dest] = None
-                    else:
-                        df = dynamicfields.get('*_%s'%dest.split('_')[-1], None)
-                        if df is not None:
-                            fields[source] = df
-        # Massage list, remove filterfields, assign fieldtypes to fields
+        # Massage list, assign fieldtypes to fields
         res = {}
         for k,v in fields.items():
-            #if not filterfields.has_key(k):
             res[k] = fieldtypes.get(v,v)
         self.fields = res
 
