Index: collective.solr/trunk/collective/solr/parser.py
===================================================================
--- collective.solr/trunk/collective/solr/parser.py	(revision 0)
+++ collective.solr/trunk/collective/solr/parser.py	(revision 13423)
@@ -0,0 +1,37 @@
+from elementtree.ElementTree import iterparse
+from StringIO import StringIO
+from DateTime import DateTime
+
+
+unmarshallers = {
+    'int': lambda x: int(x.text),
+    'bool': lambda x: x.text == 'true',
+    'str': lambda x: x.text or '',
+    'date': lambda x: DateTime(x.text),
+}
+
+
+class Flare(object):
+    """ a sol(a)r brain """
+
+
+def parseResults(data):
+    """ parser for results returned from solr """
+
+    results = None
+    flare = None
+
+    for action, elem in iterparse(StringIO(data), events=('start',)):
+        if elem.tag == 'result':
+            results = []
+        elif elem.tag == 'doc':
+            flare = Flare()
+            results.append(flare)
+        elif flare is not None:
+            unmarshal = unmarshallers.get(elem.tag)
+            if unmarshal is not None:
+                if flare is not None:
+                    data = unmarshal(elem)
+                    setattr(flare, elem.get('name'), data)
+    return results
+
Index: collective.solr/trunk/collective/solr/tests.py
===================================================================
--- collective.solr/trunk/collective/solr/tests.py	(revision 13422)
+++ collective.solr/trunk/collective/solr/tests.py	(revision 13423)
@@ -2,8 +2,11 @@
 import httplib
 
 import StringIO
+from DateTime import DateTime
 
 from collective.solr.solr import SolrConnection
+from collective.solr.parser import parseResults
+
 
 ADD_REQUEST = """POST /solr/update HTTP/1.1\r
 Host: localhost\r
@@ -173,7 +176,6 @@
 
         self.failUnless(res.find(('.//doc')))
 
-
     def test_delete(self):
         output = []
         c = SolrConnection(host='localhost:8983', persistent=True)
@@ -194,11 +196,24 @@
         res.find('QTime')
 
 
+class ParserTests(unittest.TestCase):
+
+    def testParseSearchResults(self):
+        results = parseResults(SEARCH_RESPONSE.split('\n\n', 1)[1])
+        match = results[0]
+        self.assertEqual(len(results), 1)
+        self.assertEqual(match.id, '500')
+        self.assertEqual(match.name, 'python test doc')
+        self.assertEqual(match.popularity, 0)
+        self.assertEqual(match.sku, '500')
+        self.assertEqual(match.timestamp, DateTime('2008-02-29 16:11:46.998 GMT'))
+
+
 def test_suite():
     return unittest.TestSuite((
         unittest.makeSuite( TestSolr ),
+        unittest.makeSuite( ParserTests ),
         ))
 
-
 if __name__ == '__main__':
     unittest.main(defaultTest='test_suite')
