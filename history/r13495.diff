Index: collective.solr/trunk/collective/solr/indexer.py
===================================================================
--- collective.solr/trunk/collective/solr/indexer.py	(revision 13494)
+++ collective.solr/trunk/collective/solr/indexer.py	(revision 13495)
@@ -10,8 +10,14 @@
     # We might want to handle datetime and time as well
     # XXX check the enfold.solr implementation
     if isinstance(value, DateTime):
-        return value.toZone('UTC')
-    return 'null'
+        value = value.toZone('UTC')
+        value = '%04d-%02d-%02dT%02d:%02d:%02dZ' % ( value.year()
+                                                   , value.month()
+                                                   , value.day()
+                                                   , value.hour()
+                                                   , value.minute()
+                                                   , value.second())
+    return ''
 
 
 handlers = {'solr.DateField': datehandler}
Index: collective.solr/trunk/collective/solr/solr.py
===================================================================
--- collective.solr/trunk/collective/solr/solr.py	(revision 13494)
+++ collective.solr/trunk/collective/solr/solr.py	(revision 13495)
@@ -136,11 +136,11 @@
         return self.encoder(key)[0]  #to utf8
     
     def delete(self, id):
-        xstr = '<delete><id>'+self.escapeVal(unicode(id))+'</id></delete>'
+        xstr = '<delete><id>%s</id></delete>' % self.escapeVal(id)
         return self.doUpdateXML(xstr)
 
     def deleteByQuery(self, query):
-        xstr = '<delete><query>'+self.escapeVal(query)+'</query></delete>'
+        xstr = '<delete><query>%s</query></delete>' % self.escapeVal(query)
         return self.doUpdateXML(xstr)
 
     def __makeField(self, lst, f, v):
@@ -148,16 +148,12 @@
             f = str(f)
         if not isinstance(v, basestring):
             v = str(v)
-        lst.append('<field name="')
-        lst.append(self.escapeKey(f))
-        lst.append('">')
-        lst.append(self.escapeVal(v))
-        lst.append('</field>') 
+        lst.append('<field name="%s">%s</field>' % (self.escapeKey(f), self.escapeVal(v)))
 
     def __add(self, lst, fields):
         lst.append('<doc>')
         for f,v in fields.items():
-            if isinstance(v, list): # multi-valued
+            if isinstance(v, (list,tuple)): # multi-valued
                 for value in v:
                     self.__makeField(lst, f, value)
             else:
@@ -180,12 +176,10 @@
         return self.doUpdateXML(xstr)
 
     def commit(self, waitFlush=True, waitSearcher=True, optimize=False):
-        xstr = '<commit'
-        if optimize: xstr='<optimize'
-        if not waitSearcher:  #just handle deviations from the default
-            if not waitFlush: xstr +=' waitFlush="false" waitSearcher="false"'
-            else: xstr += ' waitSearcher="false"'
-        xstr += '/>'
+        data = { 'committype':optimize and 'optimize' or 'commit'
+               , 'nowait':not waitSearcher and ' waitSearcher="false"' or ''
+               , 'noflush':not waitFlush and not waitSearcher and ' waitFlush="false"' or ''}
+        xstr = '<%(committype)s%(noflush)s%(nowait)s/>' % data
         return self.doUpdateXML(xstr)
 
     def search(self, **params):
