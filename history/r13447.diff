Index: collective.solr/trunk/collective/solr/tests/test_parser.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_parser.py	(revision 13446)
+++ collective.solr/trunk/collective/solr/tests/test_parser.py	(revision 13447)
@@ -2,7 +2,6 @@
 from DateTime import DateTime
 
 from collective.solr.parser import SolrResponse
-from collective.solr.parser import parse2
 from collective.solr.parser import parseConfig
 from collective.solr.tests.utils import getData
 
@@ -76,75 +75,6 @@
         self.assertEqual(counts['facet_fields']['cat']['software'], 1)
         self.assertEqual(counts['facet_fields']['inStock']['true'], 1)
 
-    def testParseFacetSearchResults2(self):
-        facet_xml_response = getData('facet_xml_response.txt')
-        response = parse2(facet_xml_response)
-        self.failUnless(response)
-        results = response.getResults()
-        self.assertEqual(len(results), 0)
-        headers = response.getHeaders()
-        self.assertEqual(type(headers), type({}))
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 1)
-        self.assertEqual(headers['params']['facet.limit'], '-1')
-        self.assertEqual(headers['params']['rows'], '0')
-        self.assertEqual(headers['params']['facet'], 'true')
-        self.assertEqual(headers['params']['facet.field'], ['cat', 'inStock'])
-        self.assertEqual(headers['params']['indent'], '10')
-        self.assertEqual(headers['params']['q'], 'solr')
-        counts = response['facet_counts']
-        self.assertEqual(type(counts), type({}))
-        self.assertEqual(counts['facet_queries'], {})
-        self.assertEqual(counts['facet_fields']['cat']['electronics'], 0)
-        self.assertEqual(counts['facet_fields']['cat']['monitor'], 0)
-        self.assertEqual(counts['facet_fields']['cat']['search'], 1)
-        self.assertEqual(counts['facet_fields']['cat']['software'], 1)
-        self.assertEqual(counts['facet_fields']['inStock']['true'], 1)
-
-    def testParseComplexSearchResults2(self):
-        complex_xml_response = getData('complex_xml_response.txt')
-        response = parse2(complex_xml_response)
-        self.failUnless(response)
-        results = response.getResults()
-        self.assertEqual(len(results), 2)
-        first = results[0]
-        self.assertEqual(first.cat, ['software', 'search'])
-        self.assertEqual(len(first.features), 7)
-        self.assertEqual([type(x).__name__ for x in first.features], ['str'] * 6 + ['unicode'])
-        self.assertEqual(first.id, 'SOLR1000')
-        self.assertEqual(first.inStock, True)
-        self.assertEqual(first.incubationdate_dt, DateTime('2006/01/17 GMT'))
-        self.assertEqual(first.manu, 'Apache Software Foundation')
-        self.assertEqual(first.popularity, 10)
-        self.assertEqual(first.price, 0.0)
-        headers = response.getHeaders()
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 0)
-        self.assertEqual(headers['params']['indent'], 'on')
-        self.assertEqual(headers['params']['rows'], '10')
-        self.assertEqual(headers['params']['start'], '0')
-        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
-        self.assertEqual(headers['params']['version'], '2.2')
-
-    def testParseSearchResponse2(self):
-        search_response = getData('search_response.txt')
-        response = parse2(search_response.split('\n\n', 1)[1])
-        results = response.getResults()
-        match = results[0]
-        self.assertEqual(len(results), 1)
-        self.assertEqual(match.id, '500')
-        self.assertEqual(match.name, 'python test doc')
-        self.assertEqual(match.popularity, 0)
-        self.assertEqual(match.sku, '500')
-        self.assertEqual(match.timestamp, DateTime('2008-02-29 16:11:46.998 GMT'))
-        headers = response.getHeaders()
-        self.assertEqual(headers['status'], 0)
-        self.assertEqual(headers['QTime'], 0)
-        self.assertEqual(headers['params']['wt'], 'xml')
-        self.assertEqual(headers['params']['indent'], 'on')
-        self.assertEqual(headers['params']['rows'], '10')
-        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
-
     def testParseConfig(self):
         schema = getData('schema.xml')
         res = parseConfig(schema)
Index: collective.solr/trunk/collective/solr/tests/test_parser2.py
===================================================================
--- collective.solr/trunk/collective/solr/tests/test_parser2.py	(revision 0)
+++ collective.solr/trunk/collective/solr/tests/test_parser2.py	(revision 13447)
@@ -0,0 +1,87 @@
+from unittest import TestCase, TestSuite, makeSuite, main
+from DateTime import DateTime
+
+from collective.solr.parser import parse2
+from collective.solr.tests.utils import getData
+
+
+class ParserTests(TestCase):
+
+    def testParseFacetSearchResults(self):
+        facet_xml_response = getData('facet_xml_response.txt')
+        response = parse2(facet_xml_response)
+        self.failUnless(response)
+        results = response.getResults()
+        self.assertEqual(len(results), 0)
+        headers = response.getHeaders()
+        self.assertEqual(type(headers), type({}))
+        self.assertEqual(headers['status'], 0)
+        self.assertEqual(headers['QTime'], 1)
+        self.assertEqual(headers['params']['facet.limit'], '-1')
+        self.assertEqual(headers['params']['rows'], '0')
+        self.assertEqual(headers['params']['facet'], 'true')
+        self.assertEqual(headers['params']['facet.field'], ['cat', 'inStock'])
+        self.assertEqual(headers['params']['indent'], '10')
+        self.assertEqual(headers['params']['q'], 'solr')
+        counts = response['facet_counts']
+        self.assertEqual(type(counts), type({}))
+        self.assertEqual(counts['facet_queries'], {})
+        self.assertEqual(counts['facet_fields']['cat']['electronics'], 0)
+        self.assertEqual(counts['facet_fields']['cat']['monitor'], 0)
+        self.assertEqual(counts['facet_fields']['cat']['search'], 1)
+        self.assertEqual(counts['facet_fields']['cat']['software'], 1)
+        self.assertEqual(counts['facet_fields']['inStock']['true'], 1)
+
+    def testParseComplexSearchResults(self):
+        complex_xml_response = getData('complex_xml_response.txt')
+        response = parse2(complex_xml_response)
+        self.failUnless(response)
+        results = response.getResults()
+        self.assertEqual(len(results), 2)
+        first = results[0]
+        self.assertEqual(first.cat, ['software', 'search'])
+        self.assertEqual(len(first.features), 7)
+        self.assertEqual([type(x).__name__ for x in first.features], ['str'] * 6 + ['unicode'])
+        self.assertEqual(first.id, 'SOLR1000')
+        self.assertEqual(first.inStock, True)
+        self.assertEqual(first.incubationdate_dt, DateTime('2006/01/17 GMT'))
+        self.assertEqual(first.manu, 'Apache Software Foundation')
+        self.assertEqual(first.popularity, 10)
+        self.assertEqual(first.price, 0.0)
+        headers = response.getHeaders()
+        self.assertEqual(headers['status'], 0)
+        self.assertEqual(headers['QTime'], 0)
+        self.assertEqual(headers['params']['indent'], 'on')
+        self.assertEqual(headers['params']['rows'], '10')
+        self.assertEqual(headers['params']['start'], '0')
+        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
+        self.assertEqual(headers['params']['version'], '2.2')
+
+    def testParseSearchResponse(self):
+        search_response = getData('search_response.txt')
+        response = parse2(search_response.split('\n\n', 1)[1])
+        results = response.getResults()
+        match = results[0]
+        self.assertEqual(len(results), 1)
+        self.assertEqual(match.id, '500')
+        self.assertEqual(match.name, 'python test doc')
+        self.assertEqual(match.popularity, 0)
+        self.assertEqual(match.sku, '500')
+        self.assertEqual(match.timestamp, DateTime('2008-02-29 16:11:46.998 GMT'))
+        headers = response.getHeaders()
+        self.assertEqual(headers['status'], 0)
+        self.assertEqual(headers['QTime'], 0)
+        self.assertEqual(headers['params']['wt'], 'xml')
+        self.assertEqual(headers['params']['indent'], 'on')
+        self.assertEqual(headers['params']['rows'], '10')
+        self.assertEqual(headers['params']['q'], 'id:[* TO *]')
+
+
+def test_suite():
+    return TestSuite((
+        makeSuite(ParserTests),
+    ))
+
+if __name__ == '__main__':
+    main(defaultTest='test_suite')
+

Property changes on: collective.solr/trunk/collective/solr/tests/test_parser2.py
___________________________________________________________________
Name: svn:eol-style
   + native

